@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }
  @return $number;
}

@mixin clearfix() {
  content: "";
  clear: both;
  display: table;
}

@mixin resolution-up($ratio) {
  @media (-webkit-min-device-pixel-ratio: $ratio), (min-resolution: #{$ratio}dppx) {
    @content;
  }
}

@mixin resolution-down($ratio) {
  @media (-webkit-max-device-pixel-ratio: $ratio), (max-resolution: #{$ratio}dppx) {
    @content;
  }
}

@mixin breakpoints-and-resolution-bg-img($img-name, $img-ext, $imgs-path, $resolution) {
  @include resolution-up($resolution) {
    background-image: url("#{$imgs-path}/#{$img-name}@1x.#{$img-ext}");
    @include media-breakpoint-up(xs) {
      background-image: url("#{$imgs-path}/#{$img-name}-#{strip-unit(map_get($grid-breakpoints, sm))}w@#{$resolution}x.#{$img-ext}");
    }
    @include media-breakpoint-up(sm) {
      background-image: url("#{$imgs-path}/#{$img-name}-#{strip-unit(map_get($grid-breakpoints, md))}w@#{$resolution}x.#{$img-ext}");
    }
    @include media-breakpoint-up(md) {
      background-image: url("#{$imgs-path}/#{$img-name}-#{strip-unit(map_get($grid-breakpoints, lg))}w@#{$resolution}x.#{$img-ext}");
    }
    @include media-breakpoint-up(lg) {
      background-image: url("#{$imgs-path}/#{$img-name}-#{strip-unit(map_get($grid-breakpoints, xl))}w@#{$resolution}x.#{$img-ext}");
    }
    @include media-breakpoint-up(xl) {
      background-image: url("#{$imgs-path}/#{$img-name}@#{$resolution}x.#{$img-ext}");
    }
  }
}
